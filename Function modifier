//SPDX-License-Identifier:MIT;
pragma solidity >=0.6.0<0.9.0;

contract FunctionModifier{
    //We will use these variables to demonstrate how to use modifiers..
    address public owner;
    uint public x =10;
    bool public locked;

    constructor() public{
        owner = msg.sender;
    }

    modifier onlyOwner(){
        // Set the transaction sender as the owner of the contract.
        require(msg.sender == owner , "Not Owner");
        _;
    }

    // Modifier to check that the caller is the owner of
    // the contract.

    modifier validAddress(address _addr){
        require(_addr!=address(0),"Not Valid address");
        // Underscore is a special character only used inside
        // a function modifier and it tells Solidity to
        // execute the rest of the code.
        _;
    }
    // Modifiers can take inputs. This modifier checks that the
    // address passed in is not the zero address.

    function changeOwner(address _newOwnwer) public onlyOwner validAddress(_newOwnwer){
        owner = _newOwnwer;
    }


    // Modifiers can be called before and / or after a function.
    // This modifier prevents a function from being called while
    // it is still executing
    modifier noReentrancy(){
        require(!locked,"No re-entrancy");
        locked = true;
        _;
        locked = false;
    }

    function decrement(uint i) public noReentrancy{
        x-=i;
        if (i>1){
            decrement(i-1);
        }
    }

}
